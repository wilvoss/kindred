import { version } from '/constants/version.js';
export async function loadGameplayModules() {
  const { RankModel, TutorialStepModel, ScoreModel, CurrencyModel, ActionItemModel, ThemeModel, PieceModel, ModeModel, SingleLevelModel, AllLevelsModel, CreateAllLevelsSource, CreateLevelSource, ConstructAllLevels, ConstructLevel, Currency, Shapes, Colors, BackgroundImages } = await import(`../models/models.min.js?${version}`);

  var AllPlayerRanks = [
    new RankModel({
      rank: 0,
      levels: 5,
      emoji: 'üß∫',
      name: 'Casual Classifier',
      hue: 48,
    }),
    new RankModel({
      rank: 1,
      levels: 10,
      emoji: 'üß∏',
      name: 'Serviceable Spotter',
      hue: 80,
    }),
    new RankModel({
      rank: 2,
      levels: 15,
      emoji: 'üìö',
      name: 'Decent Discerner',
      hue: 200,
    }),
    new RankModel({
      rank: 3,
      levels: 20,
      emoji: 'üéì',
      name: 'Marvelous Matcher',
      hue: 270,
    }),
    new RankModel({
      rank: 4,
      levels: 30,
      emoji: 'üßê',
      name: 'Wicked Watcher',
      hue: 320,
    }),
    new RankModel({
      rank: 5,
      levels: 50,
      emoji: 'üßô‚Äç‚ôÄÔ∏è',
      name: 'Precise Pinpointer',
      hue: 350,
    }),
    new RankModel({
      rank: 6,
      levels: 75,
      emoji: 'ü¶Ñ',
      name: 'Super Selector!',
      hue: 140,
    }),
  ];
  var TutorialSteps = [
    new TutorialStepModel({
      title: 'Hi! This is me.',
      description: 'I live inside this button.',
      unreveal: true,
    }),
    new TutorialStepModel({
      title: 'This is still me.',
      description: 'I change every level.',
      unreveal: true,
    }),
    new TutorialStepModel({
      title: 'This is a level.',
      description: 'Some of these cats are like me.',
    }),
    new TutorialStepModel({
      title: 'These 4 cats are like me!',
      description: 'They are the only ones that share <b>at least 2</b> of my attributes: color, shape, or pattern.',
      partial: true,
      describe: true,
    }),
    new TutorialStepModel({
      title: 'So now what?',
      description: 'Select all of the cats like me (hint, the top 4) and then click me to clear the level. Hit <b>BACK</b> if you get stuck.',
      checkBoard: true,
    }),
    new TutorialStepModel({
      title: "That's it!",
      description: 'Clear as many levels as possible before the clock runs out. Perfect clears add bonus time.',
      unreveal: true,
    }),
  ];
  let Currencies = [
    new CurrencyModel({
      id: 1,
      name: 'Gem',
      pluralName: 'Gems',
      labor: 'One level is worth 10 gems. Clearing all levels in one game is worth an additional 1,000 gems. ',
      className: 'gem',
      count: UseDebug ? 1000 : 1000,
      isEnabled: true,
    }),
    new CurrencyModel({
      id: 2,
      name: 'Key',
      pluralName: 'Keys',
      labor: '1 key is earned for every 5 unassisted levels cleared.',
      count: 0,
    }),
    new CurrencyModel({
      id: 3,
      name: 'Coin',
      pluralName: 'Coins',
      count: 0,
    }),
  ];
  let ActionItems = [
    new ActionItemModel({
      id: 1,
      order: 0,
      icon: 'üîé',
      name: 'AUTO HINT',
      description: 'Highlights a mistake',
      explanation: 'Automatically highlights a mistake on the board after you try to solve the level. Also forgives that attempt.',
      cost: 500,
      count: UseDebug ? 0 : 0,
      currency: Currencies[0],
      maxCount: 10,
    }),
    new ActionItemModel({
      id: 4,
      order: 1,
      icon: 'üéüÔ∏è',
      name: 'CLEAR LEVEL',
      description: 'Gives one perfect level',
      explanation: 'Forgives all mistakes made on the current level, solves it perfectly, and then advances you to the next level. You must tap in-game to spend.',
      maxCount: 4,
      cost: 2500,
      count: UseDebug ? 0 : 0,
      currency: Currencies[0],
    }),
    new ActionItemModel({
      id: 3,
      order: 2,
      icon: '‚åõÔ∏è',
      name: 'ADD &nbsp;10s',
      description: 'Adds 10 seconds',
      explanation: 'With a maximum of 3 in any given game, you can add a total of 30 seconds to the clock with this powerup! You must tap in-game to spend.',
      maxCount: 3,
      cost: 5000,
      count: UseDebug ? 1 : 0,
      currency: Currencies[0],
    }),
    new ActionItemModel({
      id: 5,
      order: 3,
      icon: '‚åõÔ∏è',
      name: 'ADD &nbsp;30s',
      description: 'Adds 30 seconds',
      explanation: "It's possible to add a total of 60 seconds with this single-use powerup when combined with the 10 second one. You must tap in-game to spend. Use it wisely.",
      maxCount: 1,
      cost: 12500,
      count: UseDebug ? 0 : 0,
      currency: Currencies[0],
    }),
  ];
  var Themes = [
    new ThemeModel({
      name: 'Alive',
      color1: 'rgb(0 176 243)',
      color2: 'rgb(37 194 46)',
      color3: 'rgb(239 216 0)',
      color3contrast: 'rgb(0 136 8)',
      isSelected: true,
    }),
    new ThemeModel({
      name: 'Content',
      color1: 'rgb(0 202 234)',
      color2: 'rgb(84, 184, 0)',
      color3: 'rgb(184 222 0)',
      color3contrast: 'rgb(56, 122, 0)',
    }),
    new ThemeModel({
      name: 'Keen',
      color1: 'rgb(0 184 255)',
      color2: 'rgb(0 222 0) ',
      color3: 'rgb(255, 112, 227)',
    }),
    new ThemeModel({
      name: 'Wise',
      color1: 'rgb(187 127 50)',
      color2: 'rgb(104 195 156)',
      color3: 'rgb(255 173 43)',
      darkPatternHSL: '0, 0%, 50%',
      darkBlendMode: 'luminosity',
    }),
    new ThemeModel({
      name: 'Awake',
      color1: 'hsl(313, 32%, 41%)',
      color2: 'hsl(187, 42%, 46%)',
      color3: 'hsl(64, 60%, 49%)',
      color3contrast: 'black',
    }),
    new ThemeModel({
      name: 'Aware',
      color1: 'rgb(138 33 115)',
      color2: 'rgb(37 174 193)',
      color3: 'rgb(209 224 0)',
      color3contrast: 'black',
    }),
    new ThemeModel({
      name: 'Calm',
      color1: 'rgb(117 93 122)',
      color2: 'rgb(68 130 155)',
      color3: 'rgb(167, 177, 119)',
    }),
    new ThemeModel({
      name: 'Intent',
      color1: 'hsl(0, 0%, 35%)',
      color2: 'hsl(0, 0%, 56%)',
      color3: 'hsl(0, 0%, 80%)',
      color3contrast: 'black',
      darkPatternOpacity: 0.5,
      darkPatternHSL: '0, 0%, 0%',
      darkBlendMode: 'overlay',
    }),
    new ThemeModel({
      name: 'Moody',
      color1: 'rgb(96, 0, 117)',
      color2: 'rgb(204, 17, 110)',
      color3: 'rgb(255, 127, 78)',
      darkPatternHSL: '0, 0%, 50%',
      darkBlendMode: 'luminosity',
    }),
    new ThemeModel({
      name: 'Mellow',
      color1: 'rgb(58, 93, 66)',
      color2: 'rgb(79, 159, 198)',
      color3: 'rgb(134, 219, 162)',
      color3contrast: 'rgb(58, 93, 66)',
    }),
    new ThemeModel({
      name: 'Antsy',
      color1: 'rgb(129, 32, 0)',
      color2: 'rgb(255, 0, 0)',
      color3: 'rgb(255, 159, 0)',
      darkPatternHSL: '0, 0%, 50%',
      darkBlendMode: 'luminosity',
    }),
    new ThemeModel({
      name: 'Sullen',
      color1: 'rgb(66, 39, 110)',
      color2: 'rgb(74, 116, 150)',
      color3: 'rgb(134, 198, 165)',
      darkPatternOpacity: 0.5,
    }),
  ];
  const BatThwaps = [
    'AIEEE!',
    'AIIEEE!',
    'ARRRGH!',
    'AWK!',
    'AWKKKKKK!',
    'BAM!',
    'BANG!',
    'BANG-ETH!',
    'BAP!',
    'BIFF!',
    'BLOOP!',
    'BLURP!',
    'BONK!',
    'CLANK!',
    'CLANGE!',
    'CLANK-EST!',
    'CLASH!',
    'CLUNK!',
    'CLUNK-ETH!',
    'CRAAACK!',
    'CRASH!',
    'CRRAAACK!',
    'CRUNCH!',
    'CRUNCH-ETH!',
    'EEE-YOW!',
    'FLRBBBBB!',
    'GLIPP!',
    'GLURPP!',
    'KAPOW!',
    'KAYO!',
    'KER-PLOP!',
    'KER-SPLOOSH!',
    'KLONK!',
    'KRUNCH!',
    'OOOFF!',
    'OOOOFF!',
    'OUCH!',
    'OUCH-ETH!',
    'OWWW!',
    'OW-ETH!',
    'PAM!',
    'PLOP!',
    'POW!',
    'POWIE!',
    'QUNCKKK!',
    'RAKKK!',
    'RIP!',
    'SLOSH!',
    'SOCK!',
    'SPLAAT!',
    'SPLATT!',
    'SPLOOSH!',
    'SWAAP!',
    'SWISH!',
    'SWOOSH!',
    'THUNK!',
    'THWACK!',
    'THWACKEL!',
    'THWAPE!',
    'THWAPP!',
    'TOUCH√â!',
    'UGGH!',
    'URKK!',
    'URKKK!',
    'VRONK!',
    'WHACK!',
    'WHACK-ETH!',
    'WHAM-ETH!',
    'WHAMM!',
    'WHAMMM!',
    'WHAP!',
    'ZAM!',
    'ZAMM!',
    'ZAMMM!',
    'ZAP!',
    'ZAP-ETH',
    'ZGRUPPP!',
    'ZLONK!',
    'ZLOPP!',
    'ZLOTT!',
    'ZOK!',
    'ZOWIE!',
    'ZWAPP!',
    'Z-ZWAP!',
    'Z-Z-Z-Z-WAP!',
    'ZZZZZWAP!',
  ];
  var Modes = [
    new ModeModel({
      id: 'infinite',
      name: 'Zen Mode',
      description: 'Zen Mode is untimed and stress free.',
      endGameConsolationMessage: 'Find your inner zen.',
    }),
    new ModeModel({
      id: 'normal',
      name: 'Basic Mode',
      description: 'Basic Mode starts with a 1 minute timer.',
      starttime: 61000,
      isSelected: true,
      bonustime: 3000,
    }),
  ];

  return {
    RankModel,
    TutorialStepModel,
    ScoreModel,
    CurrencyModel,
    ActionItemModel,
    ThemeModel,
    PieceModel,
    ModeModel,
    SingleLevelModel,
    AllLevelsModel,
    CreateAllLevelsSource,
    CreateLevelSource,
    ConstructAllLevels,
    ConstructLevel,
    Currency,
    AllPlayerRanks,
    TutorialSteps,
    Currencies,
    ActionItems,
    Themes,
    BatThwaps,
    Modes,
    Shapes,
    Colors,
    BackgroundImages,
  };
}
