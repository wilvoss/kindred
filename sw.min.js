const CACHE_VERSION = '1.0.033',
  CURRENT_CACHE = 'main-1.0.033',
  cacheFiles = [
    './',
    'audio/levelup.mp3',
    'audio/phft4.mp3',
    'audio/phts.mp3',
    'audio/sadsound.mp3',
    'audio/themesong.m4a',
    'audio/triumph.mp3',
    'constants/gameplay.js',
    'constants/version.js',
    'fonts/Abel-Regular.ttf',
    'fonts/FreckleFace-Regular.ttf',
    'helpers/console-enhancer.js',
    'helpers/howler-min.js',
    'helpers/db-helper.min.js',
    'helpers/seedrandom.js',
    'helpers/vue.esm-browser.prod.js',
    'images/burst.svg',
    'images/CatCircle.svg',
    'images/CatHexagon.svg',
    'images/CatSquare.svg',
    'images/CatTriangle.svg',
    'images/Circle.svg',
    'images/Dots.svg',
    'images/Hexagon.svg',
    'images/icon_download.svg',
    'images/icon_eye.svg',
    'images/icon_gem.svg',
    'images/icon_info.svg',
    'images/icon_inner_spinner.svg',
    'images/icon_play.svg',
    'images/icon_rank0.svg',
    'images/icon_rank1.svg',
    'images/icon_rank2.svg',
    'images/icon_rank3.svg',
    'images/icon_rank4.svg',
    'images/icon_rank5.svg',
    'images/icon_rank6.svg',
    'images/icon_rank0_sm.svg',
    'images/icon_rank1_sm.svg',
    'images/icon_rank2_sm.svg',
    'images/icon_rank3_sm.svg',
    'images/icon_rank4_sm.svg',
    'images/icon_rank5_sm.svg',
    'images/icon_rank6_sm.svg',
    'images/icon_rank0_hc.svg',
    'images/icon_rank1_hc.svg',
    'images/icon_rank2_hc.svg',
    'images/icon_rank3_hc.svg',
    'images/icon_rank4_hc.svg',
    'images/icon_rank5_hc.svg',
    'images/icon_rank6_hc.svg',
    'images/icon_rank0_hc_sm.svg',
    'images/icon_rank1_hc_sm.svg',
    'images/icon_rank2_hc_sm.svg',
    'images/icon_rank3_hc_sm.svg',
    'images/icon_rank4_hc_sm.svg',
    'images/icon_rank5_hc_sm.svg',
    'images/icon_rank6_hc_sm.svg',
    'images/icon_share.svg',
    'images/icon_zen.svg',
    'images/Square.svg',
    'images/Stars.svg',
    'images/Stripes.svg',
    'images/Triangle.svg',
    'images/Waves.svg',
    'models/models.js',
    'models/models.min.js',
    'scripts/kindred.js',
    'scripts/kindred.min.js',
    'styles/altpattern1.css',
    'styles/altpattern2.css',
    'styles/cats-kindred.css',
    'styles/kindred-darkmode.css',
    'styles/kindred.css',
    'index.html',
  ];
self.addEventListener('activate', (s) => {
  s.waitUntil(caches.keys().then((s) => Promise.all(s.map((s) => (s !== CURRENT_CACHE ? caches.delete(s) : Promise.resolve()))))), s.waitUntil(clients.claim());
}),
  self.addEventListener('install', (s) => s.waitUntil(caches.open(CURRENT_CACHE).then((s) => s.addAll(cacheFiles)))),
  self.addEventListener('message', function (s) {
    'skipWaiting' === s.data.action && self.skipWaiting();
  }),
  self.addEventListener('fetch', (s) => {
    if ('navigate' !== s.request.mode)
      if (s.request.url.endsWith('.txt')) s.respondWith(fetch(s.request));
      else {
        let e = s.request.url.split('.').pop();
        'js' === e || 'css' === e || 'html' === e
          ? s.respondWith(
              caches.open(CURRENT_CACHE).then((e) =>
                fetch(s.request)
                  .then((a) => (e.put(s.request.url, a.clone()), a))
                  .catch((a) => e.match(s.request.url).then((s) => s || new Response('Network error', { status: 500 }))),
              ),
            )
          : s.respondWith(caches.open(CURRENT_CACHE).then((e) => e.match(s.request.url).then((a) => a || fetch(s.request).then((a) => (e.put(s.request.url, a.clone()), a)))));
      }
    else
      s.respondWith(
        fetch(s.request)
          .then((e) => caches.open(CURRENT_CACHE).then((a) => (a.put(s.request, e.clone()), e)))
          .catch(() => caches.match(s.request)),
      );
  });
